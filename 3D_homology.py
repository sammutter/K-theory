#! /usr/bin/python
import math
import numpy as np
import sys
import time

np.set_printoptions(threshold=sys.maxsize)

# Name of group
name = "11,2,7,8,wow"

unpt_sqs = [[2, 7, 22, -17], [2, 8, 52, -58], [2, 17, -12, -57], [2, 18, -52, 48], [2, 27, -52, 27], [2, 28, 12, 58], [2, 37, 12, 37], [2, 38, -2, -38], [2, 47, 52, -7], [2, 48, -52, 18], [2, 57, -42, -47], [2, 58, 12, 28], [2, -7, 52, 47], [2, -8, -12, -18], [2, -17, 22, 7], [2, -18, -12, -8], [2, -27, 2, -37], [2, -28, -42, -28], [2, -47, -42, 57], [2, -48, 22, -48], [2, -57, -12, 17], [2, -58, 52, 8], [7, 8, -47, -58], [7, 12, 27, -22], [7, 18, 27, 28], [7, 28, 27, 18], [7, 32, -57, 32], [7, 38, -37, -18], [7, 42, 17, 42], [7, 48, -17, 48], [7, 52, 57, -12], [7, 58, 7, -28], [7, -8, 37, -48], [7, -12, 57, 52], [7, -18, -37, 38], [7, -22, 27, 12], [7, -32, 7, -42], [7, -38, 57, -38], [7, -48, 37, -8], [7, -58, -47, 8], [8, 17, 18, -57], [8, 22, 8, 42], [8, 27, -28, 57], [8, 32, -8, -32], [8, 37, 8, -27], [8, 47, -38, 47], [8, 57, -28, 27], [8, -12, -38, -22], [8, -17, 38, -17], [8, -22, -38, -12], [8, -42, 38, -52], [8, -52, 38, -42], [8, -57, 18, 17], [12, 17, 32, -27], [12, 47, 22, 47], [12, 48, -12, -48], [12, -18, -22, -28], [12, -27, 32, 17], [12, -28, -22, -18], [12, -37, 12, -47], [12, -38, -52, -38], [12, -58, 32, -58], [17, 22, 37, -32], [17, 28, 37, 38], [17, 38, 37, 28], [17, 48, -47, -28], [17, 52, 27, 52], [17, 58, -27, 58], [17, -18, 47, -58], [17, -28, -47, 48], [17, -32, 37, 22], [17, -42, 17, -52], [17, -58, 47, -18], [18, 32, 18, 52], [18, 42, -18, -42], [18, 47, 18, -37], [18, 57, -48, 57], [18, -22, -48, -32], [18, -27, 48, -27], [18, -32, -48, -22], [22, 27, 42, -37], [22, 57, 32, 57], [22, 58, -22, -58], [22, -28, -32, -38], [22, -37, 42, 27], [22, -38, -32, -28], [22, -47, 22, -57], [27, 32, 47, -42], [27, 38, 47, 48], [27, 48, 47, 38], [27, 58, -57, -38], [27, -38, -57, 58], [27, -42, 47, 32], [28, 52, -28, -52], [28, 57, 28, -47], [28, -32, -58, -42], [28, -37, 58, -37], [28, -42, -58, -32], [32, 37, 52, -47], [32, -38, -42, -48], [32, -47, 52, 37], [32, -48, -42, -38], [37, 42, 57, -52], [37, 48, 57, 58], [37, 58, 57, 48], [37, -52, 57, 42], [42, -48, -52, -58], [42, -58, -52, -48]]

unpt_cubes = [[[2, 7, 22, -17], [58, -52, -8, -2], [17, -18, 47, -58], [52, -47, 32, 37], [18, -22, -48, -32], [-7, 8, -37, 48]], [[2, 7, 22, -17], [-48, 52, -18, -2], [17, -28, -47, 48], [-52, 47, -32, -37], [28, -22, 38, 32], [-7, 18, 37, -38]], [[2, 7, 22, -17], [-58, -12, -28, -2], [17, 58, -27, 58], [12, 27, -22, 7], [-58, -22, 58, 22], [-7, 28, -7, -58]], [[2, 7, 22, -17], [38, 2, -38, -2], [17, -8, 17, -38], [-2, -17, 12, 57], [8, -22, -38, -12], [-7, 38, -57, 38]], [[2, 7, 22, -17], [-38, 2, 38, -2], [17, 28, 37, 38], [-2, -37, -12, -37], [-28, -22, -18, 12], [-7, -38, 37, 18]], [[2, 7, 22, -17], [-18, 52, -48, -2], [17, 8, -57, 18], [-52, 57, 42, 37], [-8, -22, -8, -42], [-7, 48, -37, 8]], [[2, 7, 22, -17], [-28, -12, -58, -2], [17, 38, 37, 28], [12, -37, 12, -47], [-38, -22, 8, -12], [-7, 58, 47, -8]], [[2, 7, 22, -17], [18, 12, 8, -2], [17, -58, 47, -18], [-12, -47, -22, -47], [58, -22, -58, 22], [-7, -8, 47, 58]], [[2, 7, 22, -17], [8, 12, 18, -2], [17, -38, 17, -8], [-12, -17, -32, 27], [38, -22, 28, 32], [-7, -18, -27, -28]], [[2, 7, 22, -17], [28, 42, 28, -2], [17, 48, -47, -28], [-42, 47, 32, 27], [-48, -22, 18, -32], [-7, -28, -27, -18]], [[2, 7, 22, -17], [48, -22, 48, -2], [17, -48, -7, -48], [22, 7, 2, -17], [48, -22, 48, -2], [-7, -48, 17, -48]], [[2, 7, 22, -17], [-8, -52, 58, -2], [17, 18, -57, 8], [52, 57, -12, 7], [-18, -22, -28, 12], [-7, -58, -7, 28]], [[2, 17, -12, -57], [58, -52, -8, -2], [57, 38, -27, -58], [52, 27, 52, 17], [-38, 12, -38, -52], [-17, 8, -17, 38]], [[2, 17, -12, -57], [-48, 52, -18, -2], [57, 58, 37, 48], [-52, -37, -32, 47], [-58, 12, -58, 32], [-17, 18, -47, 58]], [[2, 17, -12, -57], [-58, -12, -28, -2], [57, 48, 37, 58], [12, -37, 12, -47], [-48, 12, 48, -12], [-17, 28, 47, -48]], [[2, 17, -12, -57], [38, 2, -38, -2], [57, -38, 7, -38], [-2, -7, -22, 17], [38, 12, -8, 22], [-17, 38, -17, 8]], [[2, 17, -12, -57], [-38, 2, 38, -2], [57, -58, -27, 38], [-2, 27, -2, 37], [58, 12, 28, 2], [-17, -38, -37, -28]], [[2, 17, -12, -57], [-18, 52, -48, -2], [57, -48, 57, 18], [-52, -57, 12, -7], [48, 12, -48, -12], [-17, 48, 7, 48]], [[2, 17, -12, -57], [-28, -12, -58, -2], [57, 28, -47, 28], [12, 47, 22, 47], [-28, 12, -18, -22], [-17, 58, -47, 18]], [[2, 17, -12, -57], [18, 12, 8, -2], [57, -8, -17, -18], [-12, 17, 2, -57], [8, 12, 18, -2], [-17, -8, 57, -18]], [[2, 17, -12, -57], [8, 12, 18, -2], [57, -18, -17, -8], [-12, 17, 2, -57], [18, 12, 8, -2], [-17, -18, 57, -8]], [[2, 17, -12, -57], [28, 42, 28, -2], [57, 8, 27, -28], [-42, -27, -22, 37], [-8, 12, 38, 22], [-17, -28, -37, -38]], [[2, 17, -12, -57], [48, -22, 48, -2], [57, 18, 57, -48], [22, -57, 22, -47], [-18, 12, -28, -22], [-17, -48, 47, 28]], [[2, 17, -12, -57], [-8, -52, 58, -2], [57, -28, 27, 8], [52, -27, -2, -27], [28, 12, 58, 2], [-17, -58, 27, -58]], [[2, 27, -52, 27], [58, -52, -8, -2], [-27, 38, 57, -58], [52, -57, -42, -37], [-38, 52, -8, 42], [-27, 8, 37, 8]], [[2, 27, -52, 27], [-48, 52, -18, -2], [-27, 18, -27, 48], [-52, 27, 2, 27], [-18, 52, -48, -2], [-27, 18, -27, 48]], [[2, 27, -52, 27], [38, 2, -38, -2], [-27, -48, -47, -38], [-2, 47, 42, -57], [48, 52, 58, -42], [-27, 38, 57, -58]], [[2, 27, -52, 27], [-38, 2, 38, -2], [-27, -58, 57, 38], [-2, -57, 42, 47], [58, 52, 48, -42], [-27, -38, -47, -48]], [[2, 27, -52, 27], [-28, -12, -58, -2], [-27, -8, -57, 28], [12, 57, -2, -17], [8, 52, -58, 2], [-27, 58, 17, 58]], [[2, 27, -52, 27], [18, 12, 8, -2], [-27, -28, -7, -18], [-12, 7, 52, 57], [28, 52, -28, -52], [-27, -8, -57, 28]], [[2, 27, -52, 27], [8, 12, 18, -2], [-27, 28, -57, -8], [-12, 57, 52, 7], [-28, 52, 28, -52], [-27, -18, -7, -28]], [[2, 27, -52, 27], [28, 42, 28, -2], [-27, -18, -7, -28], [-42, 7, -32, 7], [18, 52, 18, 32], [-27, -28, -7, -18]], [[2, 27, -52, 27], [48, -22, 48, -2], [-27, -38, -47, -48], [22, 47, 12, 47], [38, 52, 38, -12], [-27, -48, -47, -38]], [[2, 27, -52, 27], [-8, -52, 58, -2], [-27, 8, 37, 8], [52, -37, -42, -57], [-8, 52, -38, 42], [-27, -58, 57, 38]], [[2, 37, 12, 37], [58, -52, -8, -2], [-37, -48, -57, -58], [52, 57, -12, 7], [48, -12, -48, 12], [-37, 8, -7, 48]], [[2, 37, 12, 37], [-48, 52, -18, -2], [-37, 8, -7, 48], [-52, 7, -2, -47], [-8, -12, -18, 2], [-37, 18, 47, 18]], [[2, 37, 12, 37], [-58, -12, -28, -2], [-37, 28, -37, 58], [12, 37, 2, 37], [-28, -12, -58, -2], [-37, 28, -37, 58]], [[2, 37, 12, 37], [-38, 2, 38, -2], [-37, -18, 7, 38], [-2, -7, -22, 17], [18, -12, 28, 22], [-37, -38, -17, -28]], [[2, 37, 12, 37], [-18, 52, -48, -2], [-37, 18, 47, 18], [-52, -47, -2, 7], [-18, -12, -8, 2], [-37, 48, -7, 8]], [[2, 37, 12, 37], [18, 12, 8, -2], [-37, 38, 7, -18], [-12, -7, 22, -27], [-38, -12, 8, -22], [-37, -8, 27, -8]], [[2, 37, 12, 37], [8, 12, 18, -2], [-37, -8, 27, -8], [-12, -27, 22, -7], [8, -12, -38, -22], [-37, -18, 7, 38]], [[2, 37, 12, 37], [28, 42, 28, -2], [-37, -38, -17, -28], [-42, 17, -52, 17], [38, -12, 38, 52], [-37, -28, -17, -38]], [[2, 37, 12, 37], [48, -22, 48, -2], [-37, -58, -57, -48], [22, 57, 32, 57], [58, -12, 58, -32], [-37, -48, -57, -58]], [[2, 37, 12, 37], [-8, -52, 58, -2], [-37, 48, -7, 8], [52, 7, -12, 57], [-48, -12, 48, 12], [-37, -58, -57, -48]], [[2, 47, 52, -7], [58, -52, -8, -2], [7, 8, -47, -58], [52, 47, 2, -7], [-8, -52, 58, -2], [-47, 8, 7, -58]], [[2, 47, 52, -7], [-48, 52, -18, -2], [7, 48, -17, 48], [-52, 17, -42, 17], [-48, -52, -58, 42], [-47, 18, -17, 58]], [[2, 47, 52, -7], [-58, -12, -28, -2], [7, -28, 7, 58], [12, -7, -52, -57], [28, -52, -28, 52], [-47, 28, 57, 28]], [[2, 47, 52, -7], [38, 2, -38, -2], [7, -38, 57, -38], [-2, -57, 42, 47], [38, -52, 8, -42], [-47, 38, -47, -8]], [[2, 47, 52, -7], [-38, 2, 38, -2], [7, -18, -37, 38], [-2, 37, -2, 27], [18, -52, 48, 2], [-47, -38, -27, -48]], [[2, 47, 52, -7], [-18, 52, -48, -2], [7, 28, 27, 18], [-52, -27, -52, -17], [-28, -52, 28, 52], [-47, 48, 17, -28]], [[2, 47, 52, -7], [-28, -12, -58, -2], [7, 18, 27, 28], [12, -27, 32, 17], [-18, -52, -18, -32], [-47, 58, -17, 18]], [[2, 47, 52, -7], [18, 12, 8, -2], [7, 38, -37, -18], [-12, 37, -12, 47], [-38, -52, -38, 12], [-47, -8, -47, 38]], [[2, 47, 52, -7], [28, 42, 28, -2], [7, 58, 7, -28], [-42, -7, -42, -17], [-58, -52, -48, 42], [-47, -28, 17, 48]], [[2, 47, 52, -7], [48, -22, 48, -2], [7, -8, 37, -48], [22, -37, 42, 27], [8, -52, 38, -42], [-47, -48, -27, -38]], [[2, 47, 52, -7], [-8, -52, 58, -2], [7, -58, -47, 8], [52, 47, 2, -7], [58, -52, -8, -2], [-47, -58, 7, 8]], [[2, 57, -42, -47], [58, -52, -8, -2], [47, -18, 17, -58], [52, -17, 42, -17], [18, 42, -18, -42], [-57, 8, 17, 18]], [[2, 57, -42, -47], [-48, 52, -18, -2], [47, 38, 27, 48], [-52, -27, -52, -17], [-38, 42, -8, 52], [-57, 18, 17, 8]], [[2, 57, -42, -47], [-58, -12, -28, -2], [47, -8, -7, 58], [12, 7, -22, 27], [8, 42, 8, 22], [-57, 28, -27, -8]], [[2, 57, -42, -47], [38, 2, -38, -2], [47, 8, 47, -38], [-2, -47, -52, 7], [-8, 42, -38, 52], [-57, 38, -7, 38]], [[2, 57, -42, -47], [-18, 52, -48, -2], [47, 18, -37, 18], [-52, 37, 42, 57], [-18, 42, 18, -42], [-57, 48, -57, -18]], [[2, 57, -42, -47], [-28, -12, -58, -2], [47, -48, -17, 28], [12, 17, 32, -27], [48, 42, 38, -32], [-57, 58, 27, -38]], [[2, 57, -42, -47], [18, 12, 8, -2], [47, -58, 17, -18], [-12, -17, -32, 27], [58, 42, -28, 32], [-57, -8, -27, 28]], [[2, 57, -42, -47], [8, 12, 18, -2], [47, 58, -7, -8], [-12, 7, 52, 57], [-58, 42, -48, -52], [-57, -18, -57, 48]], [[2, 57, -42, -47], [28, 42, 28, -2], [47, -28, -57, -28], [-42, 57, 2, -47], [28, 42, 28, -2], [-57, -28, 47, -28]], [[2, 57, -42, -47], [48, -22, 48, -2], [47, 28, -17, -48], [22, 17, -32, 37], [-28, 42, 58, 32], [-57, -48, -37, -58]], [[2, 57, -42, -47], [-8, -52, 58, -2], [47, -38, 47, 8], [52, -47, 32, 37], [38, 42, 48, -32], [-57, -58, -37, -48]], [[2, -7, 52, 47], [-48, 52, -18, -2], [-47, -28, 17, 48], [-52, -17, -52, -27], [28, -52, -28, 52], [7, 18, 27, 28]], [[2, -7, 52, 47], [-58, -12, -28, -2], [-47, 18, -17, 58], [12, 17, 32, -27], [-18, -52, -18, -32], [7, 28, 27, 18]], [[2, -7, 52, 47], [38, 2, -38, -2], [-47, -48, -27, -38], [-2, 27, -2, 37], [48, -52, 18, 2], [7, 38, -37, -18]], [[2, -7, 52, 47], [-18, 52, -48, -2], [-47, 58, -17, 18], [-52, 17, -42, 17], [-58, -52, -48, 42], [7, 48, -17, 48]], [[2, -7, 52, 47], [-28, -12, -58, -2], [-47, 28, 57, 28], [12, -57, -52, -7], [-28, -52, 28, 52], [7, 58, 7, -28]], [[2, -7, 52, 47], [8, 12, 18, -2], [-47, 38, -47, -8], [-12, 47, -12, 37], [-38, -52, -38, 12], [7, -18, -37, 38]], [[2, -7, 52, 47], [28, 42, 28, -2], [-47, 48, 17, -28], [-42, -17, -42, -7], [-48, -52, -58, 42], [7, -28, 7, 58]], [[2, -7, 52, 47], [48, -22, 48, -2], [-47, -38, -27, -48], [22, 27, 42, -37], [38, -52, 8, -42], [7, -48, 37, -8]], [[2, -17, 22, 7], [58, -52, -8, -2], [-7, 28, -7, -58], [52, 7, -12, 57], [-28, -22, -18, 12], [17, 8, -57, 18]], [[2, -17, 22, 7], [-48, 52, -18, -2], [-7, 8, -37, 48], [-52, 37, 42, 57], [-8, -22, -8, -42], [17, 18, -57, 8]], [[2, -17, 22, 7], [-58, -12, -28, -2], [-7, -8, 47, 58], [12, -47, 12, -37], [8, -22, -38, -12], [17, 28, 37, 38]], [[2, -17, 22, 7], [-18, 52, -48, -2], [-7, -38, 37, 18], [-52, -37, -32, 47], [38, -22, 28, 32], [17, 48, -47, -28]], [[2, -17, 22, 7], [-28, -12, -58, -2], [-7, -58, -7, 28], [12, 7, -22, 27], [58, -22, -58, 22], [17, 58, -27, 58]], [[2, -17, 22, 7], [18, 12, 8, -2], [-7, -28, -27, -18], [-12, 27, -32, -17], [28, -22, 38, 32], [17, -8, 17, -38]], [[2, -17, 22, 7], [8, 12, 18, -2], [-7, 58, 47, -8], [-12, -47, -22, -47], [-58, -22, 58, 22], [17, -18, 47, -58]], [[2, -17, 22, 7], [28, 42, 28, -2], [-7, -18, -27, -28], [-42, 27, 32, 47], [18, -22, -48, -32], [17, -28, -47, 48]], [[2, -17, 22, 7], [-8, -52, 58, -2], [-7, 48, -37, 8], [52, 37, 32, -47], [-48, -22, 18, -32], [17, -58, 47, -18]], [[2, -27, 2, -37], [58, -52, -8, -2], [37, -28, 37, -58], [52, -37, -42, -57], [28, -2, 28, 42], [27, 8, 57, -28]], [[2, -27, 2, -37], [-48, 52, -18, -2], [37, 58, 57, 48], [-52, -57, 12, -7], [-58, -2, -28, -12], [27, 18, 7, 28]], [[2, -27, 2, -37], [-58, -12, -28, -2], [37, 48, 57, 58], [12, -57, -52, -7], [-48, -2, -18, 52], [27, 28, 7, 18]], [[2, -27, 2, -37], [-38, 2, 38, -2], [37, 28, 17, 38], [-2, -17, 12, 57], [-28, -2, -58, -12], [27, -38, -57, 58]], [[2, -27, 2, -37], [18, 12, 8, -2], [37, -18, -47, -18], [-12, 47, -12, 37], [18, -2, 8, 12], [27, -8, -37, -8]], [[2, -27, 2, -37], [8, 12, 18, -2], [37, -48, 7, -8], [-12, -7, 22, -27], [48, -2, 48, -22], [27, -18, 27, -48]], [[2, -27, 2, -37], [28, 42, 28, -2], [37, -58, 37, -28], [-42, -37, 52, -57], [58, -2, -8, -52], [27, -28, 57, 8]], [[2, -27, 2, -37], [48, -22, 48, -2], [37, -8, 7, -48], [22, -7, -12, -27], [8, -2, 18, 12], [27, -48, 27, -18]], [[2, -27, 2, -37], [-8, -52, 58, -2], [37, 8, -27, 8], [52, 27, 52, 17], [-8, -2, 58, -52], [27, -58, -17, -58]], [[2, -47, -42, 57], [58, -52, -8, -2], [-57, -48, -37, -58], [52, 37, 32, -47], [48, 42, 38, -32], [47, 8, 47, -38]], [[2, -47, -42, 57], [-48, 52, -18, -2], [-57, -18, -57, 48], [-52, 57, 42, 37], [18, 42, -18, -42], [47, 18, -37, 18]], [[2, -47, -42, 57], [-58, -12, -28, -2], [-57, -38, 27, 58], [12, -27, 32, 17], [38, 42, 48, -32], [47, 28, -17, -48]], [[2, -47, -42, 57], [-18, 52, -48, -2], [-57, 8, 17, 18], [-52, -17, -52, -27], [-8, 42, -38, 52], [47, 48, 27, 38]], [[2, -47, -42, 57], [-28, -12, -58, -2], [-57, -8, -27, 28], [12, 27, -22, 7], [8, 42, 8, 22], [47, 58, -7, -8]], [[2, -47, -42, 57], [18, 12, 8, -2], [-57, 48, -57, -18], [-12, 57, 52, 7], [-48, 42, -58, -52], [47, -8, -7, 58]], [[2, -47, -42, 57], [8, 12, 18, -2], [-57, 28, -27, -8], [-12, 27, -32, -17], [-28, 42, 58, 32], [47, -18, 17, -58]], [[2, -47, -42, 57], [48, -22, 48, -2], [-57, -58, -37, -48], [22, 37, -32, 17], [58, 42, -28, 32], [47, -48, -17, 28]], [[2, -47, -42, 57], [-8, -52, 58, -2], [-57, 18, 17, 8], [52, -17, 42, -17], [-18, 42, 18, -42], [47, -58, 17, -18]], [[2, -57, -12, 17], [-48, 52, -18, -2], [-17, 48, 7, 48], [-52, -7, 12, -57], [-48, 12, 48, -12], [57, 18, 57, -48]], [[2, -57, -12, 17], [-58, -12, -28, -2], [-17, 18, -47, 58], [12, 47, 22, 47], [-18, 12, -28, -22], [57, 28, -47, 28]], [[2, -57, -12, 17], [-18, 52, -48, -2], [-17, 58, -47, 18], [-52, 47, -32, -37], [-58, 12, -58, 32], [57, 48, 37, 58]], [[2, -57, -12, 17], [-28, -12, -58, -2], [-17, -48, 47, 28], [12, -47, 12, -37], [48, 12, -48, -12], [57, 58, 37, 48]], [[2, -57, -12, 17], [28, 42, 28, -2], [-17, -38, -37, -28], [-42, 37, -22, -27], [38, 12, -8, 22], [57, -28, 27, 8]], [[2, -57, -12, 17], [48, -22, 48, -2], [-17, 28, 47, -48], [22, -47, 22, -57], [-28, 12, -18, -22], [57, -48, 57, 18]], [[2, -57, -12, 17], [-8, -52, 58, -2], [-17, 38, -17, 8], [52, 17, 52, 27], [-38, 12, -38, -52], [57, -58, -27, 38]], [[12, 27, -22, 7], [-38, -22, 8, -12], [-7, 38, -57, 38], [22, 57, 32, 57], [-38, 22, -28, -32], [-27, -8, -57, 28]], [[12, 27, -22, 7], [8, -22, -38, -12], [-7, 58, 47, -8], [22, -47, 22, -57], [-58, 22, 58, -22], [-27, 38, 57, -58]], [[12, 27, -22, 7], [48, 12, -48, -12], [-7, -48, 17, -48], [-12, -17, -32, 27], [48, 22, -18, 32], [-27, 48, -27, 18]], [[12, 27, -22, 7], [-48, 12, 48, -12], [-7, 8, -37, 48], [-12, 37, -12, 47], [-8, 22, 38, 12], [-27, -48, -47, -38]], [[12, 27, -22, 7], [28, 22, 18, -12], [-7, -18, -27, -28], [-22, 27, 12, 7], [18, 22, 28, -12], [-27, -18, -7, -28]], [[12, 27, -22, 7], [18, 22, 28, -12], [-7, -28, -27, -18], [-22, 27, 12, 7], [28, 22, 18, -12], [-27, -28, -7, -18]], [[12, 27, -22, 7], [38, 52, 38, -12], [-7, 18, 37, -38], [-52, -37, -32, 47], [-18, 22, 48, 32], [-27, -38, -47, -48]], [[12, 27, -22, 7], [58, -32, 58, -12], [-7, 28, -7, -58], [32, 7, 32, -57], [-28, 22, -38, -32], [-27, -58, 57, 38]], [[32, -57, 32, 7], [8, 32, -8, -32], [-7, 58, 47, -8], [-32, -47, 42, -27], [-58, -32, 28, -42], [57, 8, 27, -28]], [[32, -57, 32, 7], [-8, 32, 8, -32], [-7, 48, -37, 8], [-32, 37, 22, 17], [-48, -32, 18, -22], [57, -8, -17, -18]], [[32, -57, 32, 7], [58, -12, 58, -32], [-7, 28, -7, -58], [12, 7, -22, 27], [-28, -32, -38, 22], [57, -58, -27, 38]], [[32, -57, 32, 7], [-18, -52, -18, -32], [-7, -38, 37, 18], [52, -37, -42, -57], [38, -32, 48, 42], [57, 18, 57, -48]], [[32, -57, 32, 7], [18, -22, -48, -32], [-7, -28, -27, -18], [22, 27, 42, -37], [28, -32, -58, -42], [57, 48, 37, 58]], [[32, -57, 32, 7], [-48, -22, 18, -32], [-7, 8, -37, 48], [22, 37, -32, 17], [-8, -32, 8, 32], [57, -18, -17, -8]], [[32, -57, 32, 7], [-38, 22, -28, -32], [-7, 38, -57, 38], [-22, 57, -22, 47], [-38, -32, -28, 22], [57, 28, -47, 28]], [[32, -57, 32, 7], [-58, -42, 28, -32], [-7, -8, 47, 58], [42, -47, -32, -27], [8, -32, -8, 32], [57, -28, 27, 8]], [[32, -57, 32, 7], [28, -42, -58, -32], [-7, -18, -27, -28], [42, 27, 22, -37], [18, -32, -48, -22], [57, 58, 37, 48]], [[32, -57, 32, 7], [48, 42, 38, -32], [-7, -48, 17, -48], [-42, -17, -42, -7], [48, -32, 38, 42], [57, -38, 7, -38]], [[32, -57, 32, 7], [38, 42, 48, -32], [-7, 18, 37, -38], [-42, -37, 52, -57], [-18, -32, -18, -52], [57, -48, 57, 18]], [[42, 17, 42, 7], [-8, -22, -8, -42], [-7, 48, -37, 8], [22, 37, -32, 17], [-48, -42, -38, 32], [-17, 8, -17, 38]], [[42, 17, 42, 7], [38, -52, 8, -42], [-7, 18, 37, -38], [52, -37, -42, -57], [-18, -42, 18, 42], [-17, -8, 57, -18]], [[42, 17, 42, 7], [8, -52, 38, -42], [-7, 58, 47, -8], [52, -47, 32, 37], [-58, -42, 28, -32], [-17, -38, -37, -28]], [[42, 17, 42, 7], [18, 42, -18, -42], [-7, -28, -27, -18], [-42, 27, 32, 47], [28, -42, -58, -32], [-17, 18, -47, 58]], [[42, 17, 42, 7], [-18, 42, 18, -42], [-7, -38, 37, 18], [-42, -37, 52, -57], [38, -42, 8, -52], [-17, -18, 57, -8]], [[42, 17, 42, 7], [28, -32, -58, -42], [-7, -18, -27, -28], [32, 27, -42, 47], [18, -42, -18, 42], [-17, 58, -47, 18]], [[42, 17, 42, 7], [-58, -32, 28, -42], [-7, -8, 47, 58], [32, -47, 52, 37], [8, -42, 38, -52], [-17, -28, -37, -38]], [[42, 17, 42, 7], [-48, 32, -38, -42], [-7, 8, -37, 48], [-32, 37, 22, 17], [-8, -42, -8, -22], [-17, 38, -17, 8]], [[42, 17, 42, 7], [48, 52, 58, -42], [-7, -48, 17, -48], [-52, -17, -52, -27], [48, -42, 58, 52], [-17, -58, 27, -58]], [[52, 57, -12, 7], [8, -42, 38, -52], [-7, 58, 47, -8], [42, -47, -32, -27], [-58, 12, -58, 32], [-57, -38, 27, 58]], [[52, 57, -12, 7], [38, -42, 8, -52], [-7, 18, 37, -38], [42, -37, 22, 27], [-18, 12, -28, -22], [-57, -8, -27, 28]], [[52, 57, -12, 7], [-38, 12, -38, -52], [-7, 38, -57, 38], [-12, 57, 52, 7], [-38, 12, -38, -52], [-57, 38, -7, 38]], [[52, 57, -12, 7], [-18, -32, -18, -52], [-7, -38, 37, 18], [32, -37, -22, -17], [38, 12, -8, 22], [-57, 18, 17, 8]], [[52, 57, -12, 7], [-48, 42, -58, -52], [-7, 8, -37, 48], [-42, 37, -22, -27], [-8, 12, 38, 22], [-57, 58, 27, -38]], [[-12, 57, 52, 7], [-8, 22, 38, 12], [-7, 48, -37, 8], [-22, 37, -42, -27], [-48, -52, -58, 42], [-57, -38, 27, 58]], [[-12, 57, 52, 7], [38, 22, -8, 12], [-7, 18, 37, -38], [-22, -37, 32, -17], [-18, -52, -18, -32], [-57, 8, 17, 18]], [[-12, 57, 52, 7], [-18, -22, -28, 12], [-7, -38, 37, 18], [22, -37, 42, 27], [38, -52, 8, -42], [-57, 28, -27, -8]], [[-12, 57, 52, 7], [-58, 32, -58, 12], [-7, -8, 47, 58], [-32, -47, 42, -27], [8, -52, 38, -42], [-57, 58, 27, -38]], [[-22, 27, 12, 7], [-8, 12, 38, 22], [-7, 48, -37, 8], [-12, 37, -12, 47], [-48, -12, 48, 12], [-27, -38, -47, -48]], [[-22, 27, 12, 7], [-18, 32, 48, 22], [-7, -38, 37, 18], [-32, -37, -52, 47], [38, -12, 38, 52], [-27, -48, -47, -38]], [[-22, 27, 12, 7], [48, 32, -18, 22], [-7, -48, 17, -48], [-32, -17, -12, 27], [48, -12, -48, 12], [-27, 18, -27, 48]], [[-22, 27, 12, 7], [-58, -22, 58, 22], [-7, -8, 47, 58], [22, -47, 22, -57], [8, -12, -38, -22], [-27, -58, 57, 38]], [[-22, 27, 12, 7], [-38, -32, -28, 22], [-7, 38, -57, 38], [32, 57, 22, 57], [-38, -12, 8, -22], [-27, 28, -57, -8]], [[-32, 7, -42, 7], [8, -32, -8, 32], [-7, 58, 47, -8], [32, -47, 52, 37], [-58, 42, -48, -52], [-7, 8, -37, 48]], [[-32, 7, -42, 7], [-8, -32, 8, 32], [-7, 48, -37, 8], [32, 37, 52, -47], [-48, 42, -58, -52], [-7, -8, 47, 58]], [[-32, 7, -42, 7], [-58, 12, -58, 32], [-7, -8, 47, 58], [-12, -47, -22, -47], [8, 42, 8, 22], [-7, 58, 47, -8]], [[-32, 7, -42, 7], [48, 22, -18, 32], [-7, -48, 17, -48], [-22, -17, 32, -37], [48, 42, 38, -32], [-7, 18, 37, -38]], [[-32, 7, -42, 7], [-18, 22, 48, 32], [-7, -38, 37, 18], [-22, -37, 32, -17], [38, 42, 48, -32], [-7, -48, 17, -48]], [[-32, 7, -42, 7], [28, -22, 38, 32], [-7, -18, -27, -28], [22, 27, 42, -37], [18, 42, -18, -42], [-7, -38, 37, 18]], [[-32, 7, -42, 7], [38, -22, 28, 32], [-7, 18, 37, -38], [22, -37, 42, 27], [-18, 42, 18, -42], [-7, -28, -27, -18]], [[-32, 7, -42, 7], [-28, 42, 58, 32], [-7, -58, -7, 28], [-42, 7, -32, 7], [58, 42, -28, 32], [-7, -58, -7, 28]], [[-32, 7, -42, 7], [-38, -42, -48, 32], [-7, 38, -57, 38], [42, 57, -52, 37], [-38, 42, -8, 52], [-7, 48, -37, 8]], [[-32, 7, -42, 7], [-48, -42, -38, 32], [-7, 8, -37, 48], [42, 37, -52, 57], [-8, 42, -38, 52], [-7, 38, -57, 38]], [[12, 17, 32, -27], [-38, -22, 8, -12], [27, 48, 47, 38], [22, -47, 22, -57], [-48, -32, 18, -22], [-17, -8, 57, -18]], [[12, 17, 32, -27], [8, -22, -38, -12], [27, -8, -37, -8], [22, 37, -32, 17], [8, -32, -8, 32], [-17, 38, -17, 8]], [[12, 17, 32, -27], [-48, 12, 48, -12], [27, 38, 47, 48], [-12, -47, -22, -47], [-38, -32, -28, 22], [-17, -48, 47, 28]], [[12, 17, 32, -27], [28, 22, 18, -12], [27, 8, 57, -28], [-22, -57, -32, -57], [-8, -32, 8, 32], [-17, -18, 57, -8]], [[12, 17, 32, -27], [18, 22, 28, -12], [27, -48, 27, -18], [-22, -27, -42, 37], [48, -32, 38, 42], [-17, -28, -37, -38]], [[12, 17, 32, -27], [38, 52, 38, -12], [27, 58, -57, -38], [-52, 57, 42, 37], [-58, -32, 28, -42], [-17, -38, -37, -28]], [[12, 17, 32, -27], [58, -32, 58, -12], [27, -58, -17, -58], [32, 17, 12, -27], [58, -32, 58, -12], [-17, -58, 27, -58]], [[12, 47, 22, 47], [-38, -22, 8, -12], [-47, -8, -47, 38], [22, 47, 12, 47], [8, -22, -38, -12], [-47, -8, -47, 38]], [[12, 47, 22, 47], [-48, 12, 48, -12], [-47, -28, 17, 48], [-12, -17, -32, 27], [28, -22, 38, 32], [-47, -48, -27, -38]], [[12, 47, 22, 47], [28, 22, 18, -12], [-47, 48, 17, -28], [-22, -17, 32, -37], [-48, -22, 18, -32], [-47, -18, 37, -18]], [[12, 47, 22, 47], [18, 22, 28, -12], [-47, -18, 37, -18], [-22, -37, 32, -17], [18, -22, -48, -32], [-47, -28, 17, 48]], [[12, -27, 32, 17], [-38, -22, 8, -12], [-17, 8, -17, 38], [22, 17, -32, 37], [-8, -32, 8, 32], [27, -8, -37, -8]], [[12, -27, 32, 17], [8, -22, -38, -12], [-17, -18, 57, -8], [22, -57, 22, -47], [18, -32, -48, -22], [27, 38, 47, 48]], [[12, -27, 32, 17], [28, 22, 18, -12], [-17, -38, -37, -28], [-22, 37, -42, -27], [38, -32, 48, 42], [27, -18, 27, -48]], [[12, -27, 32, 17], [18, 22, 28, -12], [-17, -8, 57, -18], [-22, -57, -32, -57], [8, -32, -8, 32], [27, -28, 57, 8]], [[12, -27, 32, 17], [38, 52, 38, -12], [-17, -28, -37, -38], [-52, 37, 42, 57], [28, -32, -58, -42], [27, -38, -57, 58]], [[12, -37, 12, -47], [28, 22, 18, -12], [47, -28, -57, -28], [-22, 57, -22, 47], [28, -12, 18, 22], [37, -18, -47, -18]], [[12, -37, 12, -47], [18, 22, 28, -12], [47, -58, 17, -18], [-22, -17, 32, -37], [58, -12, 58, -32], [37, -28, 37, -58]], [[12, -37, 12, -47], [58, -32, 58, -12], [47, -18, 17, -58], [32, -17, -22, -37], [18, -12, 28, 22], [37, -58, 37, -28]], [[22, 37, -32, 17], [58, 22, -58, -22], [-17, -58, 27, -58], [-22, -27, -42, 37], [58, 32, -28, 42], [-37, 58, -37, 28]], [[22, 37, -32, 17], [-58, 22, 58, -22], [-17, 18, -47, 58], [-22, 47, -22, 57], [-18, 32, 48, 22], [-37, -58, -57, -48]], [[22, 37, -32, 17], [38, 32, 28, -22], [-17, -28, -37, -38], [-32, 37, 22, 17], [28, 32, 38, -22], [-37, -28, -17, -38]], [[22, 37, -32, 17], [28, 32, 38, -22], [-17, -38, -37, -28], [-32, 37, 22, 17], [38, 32, 28, -22], [-37, -38, -17, -28]], [[52, 27, 52, 17], [38, -42, 8, -52], [-17, -28, -37, -38], [42, 37, -52, 57], [28, -52, -28, 52], [-27, -8, -57, 28]], [[52, 27, 52, 17], [-18, -32, -18, -52], [-17, 58, -47, 18], [32, 47, -42, 27], [-58, -52, -48, 42], [-27, 18, -27, 48]], [[52, 27, 52, 17], [28, 52, -28, -52], [-17, -38, -37, -28], [-52, 37, 42, 57], [38, -52, 8, -42], [-27, 28, -57, -8]], [[52, 27, 52, 17], [-58, 42, -48, -52], [-17, 18, -47, 58], [-42, 47, 32, 27], [-18, -52, -18, -32], [-27, 48, -27, 18]], [[-32, 37, 22, 17], [-18, 22, 48, 32], [-17, 58, -47, 18], [-22, 47, -22, 57], [-58, -22, 58, 22], [-37, -48, -57, -58]], [[-32, 37, 22, 17], [58, 42, -28, 32], [-17, -58, 27, -58], [-42, -27, -22, 37], [58, -22, -58, 22], [-37, 28, -37, 58]], [[-42, 17, -52, 17], [8, 22, 8, 42], [-17, -18, 57, -8], [-22, -57, -32, -57], [18, 52, 18, 32], [-17, -8, 57, -18]], [[-42, 17, -52, 17], [-8, 52, -38, 42], [-17, 38, -17, 8], [-52, 17, -42, 17], [-38, 52, -8, 42], [-17, 38, -17, 8]], [[-42, 17, -52, 17], [58, 32, -28, 42], [-17, -58, 27, -58], [-32, -27, 42, -47], [58, 52, 48, -42], [-17, 28, 47, -48]], [[-42, 17, -52, 17], [-28, 32, 58, 42], [-17, -48, 47, 28], [-32, -47, 42, -27], [48, 52, 58, -42], [-17, -58, 27, -58]], [[-42, 17, -52, 17], [38, -32, 48, 42], [-17, -28, -37, -38], [32, 37, 52, -47], [28, 52, -28, -52], [-17, -48, 47, 28]], [[-42, 17, -52, 17], [48, -32, 38, 42], [-17, 28, 47, -48], [32, -47, 52, 37], [-28, 52, 28, -52], [-17, -38, -37, -28]], [[22, 27, 42, -37], [-8, -42, -8, -22], [37, 8, -27, 8], [42, 27, 22, -37], [-8, -42, -8, -22], [-27, 8, 37, 8]], [[22, 27, 42, -37], [18, -32, -48, -22], [37, -18, -47, -18], [32, 47, -42, 27], [18, -42, -18, 42], [-27, 48, -27, 18]], [[22, 27, 42, -37], [-58, 22, 58, -22], [37, 48, 57, 58], [-22, -57, -32, -57], [-48, -42, -38, 32], [-27, -58, 57, 38]], [[22, 27, 42, -37], [28, 32, 38, -22], [37, -58, 37, -28], [-32, -37, -52, 47], [58, -42, 48, 52], [-27, -38, -47, -48]], [[22, 57, 32, 57], [-48, -32, 18, -22], [-57, -18, -57, 48], [32, 57, 22, 57], [18, -32, -48, -22], [-57, -18, -57, 48]], [[22, 57, 32, 57], [-58, 22, 58, -22], [-57, -38, 27, 58], [-22, -27, -42, 37], [38, -32, 48, 42], [-57, -58, -37, -48]], [[22, 57, 32, 57], [38, 32, 28, -22], [-57, 58, 27, -38], [-32, -27, 42, -47], [-58, -32, 28, -42], [-57, -28, 47, -28]], [[22, 57, 32, 57], [28, 32, 38, -22], [-57, -28, 47, -28], [-32, -47, 42, -27], [28, -32, -58, -42], [-57, -38, 27, 58]], [[22, -37, 42, 27], [-48, -32, 18, -22], [-27, 18, -27, 48], [32, 27, -42, 47], [-18, -42, 18, 42], [37, -18, -47, -18]], [[22, -37, 42, 27], [38, 32, 28, -22], [-27, -48, -47, -38], [-32, 47, -52, -37], [48, -42, 58, 52], [37, -28, 37, -58]], [[22, -47, 22, -57], [-8, -42, -8, -22], [57, -28, 27, 8], [42, -27, -32, -47], [28, -22, 38, 32], [47, 8, 47, -38]], [[22, -47, 22, -57], [28, 32, 38, -22], [57, 8, 27, -28], [-32, -27, 42, -47], [-8, -22, -8, -42], [47, -38, 47, 8]], [[32, 47, -42, 27], [-8, 32, 8, -32], [-27, 8, 37, 8], [-32, -37, -52, 47], [-8, 42, -38, 52], [-47, -8, -47, 38]], [[32, 47, -42, 27], [48, 42, 38, -32], [-27, -38, -47, -48], [-42, 47, 32, 27], [38, 42, 48, -32], [-47, -38, -27, -48]], [[32, 47, -42, 27], [38, 42, 48, -32], [-27, -48, -47, -38], [-42, 47, 32, 27], [48, 42, 38, -32], [-47, -48, -27, -38]], [[-42, 47, 32, 27], [-8, 52, -38, 42], [-27, 8, 37, 8], [-52, -37, -32, 47], [-8, -32, 8, 32], [-47, 38, -47, -8]], [[32, 37, 52, -47], [-18, -52, -18, -32], [47, 18, -37, 18], [52, 37, 32, -47], [-18, -52, -18, -32], [-37, 18, 47, 18]], [[32, 37, 52, -47], [28, -42, -58, -32], [47, -28, -57, -28], [42, 57, -52, 37], [28, -52, -28, 52], [-37, 58, -37, 28]], [[32, -47, 52, 37], [-58, -42, 28, -32], [-37, 28, -37, 58], [42, 37, -52, 57], [-28, -52, 28, 52], [47, -28, -57, -28]], [[42, 57, -52, 37], [58, 52, 48, -42], [-37, -48, -57, -58], [-52, 57, 42, 37], [48, 52, 58, -42], [-57, -48, -37, -58]], [[42, 57, -52, 37], [48, 52, 58, -42], [-37, -58, -57, -48], [-52, 57, 42, 37], [58, 52, 48, -42], [-57, -58, -37, -48]]]


# Number of letters in each labelling set.
q = 11
label = [2,7,8]

gens = list(set([abs(i) for sq in unpt_sqs for i in sq]))
sizes = [len([i for i in gens if i%(q-1) == a]) for a in label]

# Number of cells of dimension i in the cube complex.
b0 = 1
b1 = sizes[0] + sizes[1] + sizes[2]
b2 = sizes[0]*sizes[1] + sizes[0]*sizes[2] + sizes[1]*sizes[2]
b3 = sizes[0]*sizes[1]*sizes[2]

# Number of cells of dimension i in the barycentric subdivision of the cube complex.
c0 = b0 + b1 + b2 + b3
c1 = 2*b1 + 4*b2 + 6*b3
c2 = 4*b2 + 12*b3
c3 = 8*b3

if len(gens) != b1 or len(unpt_sqs) != b2 or len(unpt_cubes) != b3:
    raise ValueError("Something is wrong with the sizes of the labelling sets.")
    
# Functions which return the symmetries of an unpointed tile T.
def Sh(T):
    return [-T[0],-T[3],-T[2],-T[1]]
def Sv(T):
    return [-T[2],-T[1],-T[0],-T[3]]
def Sr(T):
    return[T[2],T[3],T[0],T[1]]

# Set of all tiles symmetric to a given tile.
def all_syms(T):
    T2 = [T[1],T[2],T[3],T[0]]
    syms = [T, T2, Sr(T), Sr(T2), Sh(T), Sh(T2), Sv(T), Sv(T2)]
    return syms

# -----------------------------------------
# The matrix d1 
# -----------------------------------------
    
# d1 is a c1 x c0 matrix.
# The columns are labelled by vertices s0, s1, s2, s3.
# The rows are labelled by vertex pairs [s10, s11], by face 4-tuples [s20, s21, s22, s23], and by cube 6-tuples [s3i].
# This will be the map which sends edges to their start and end vertices.
# Every row contains exactly one -1 and one +1.
d1 = np.zeros((c1, c0)).astype(int)

c1_b1 = [[2*e, 2*e + 1] for e in range(b1)]
last_c1_b1 = c1_b1[-1][-1]
c1_b2 = [[last_c1_b1 + 1 + 4*s + i for i in range(4)] for s in range(b2)]
last_c1_b2 = c1_b2[-1][-1]
c1_b3 = [[last_c1_b2 + 1 + 6*c + i for i in range(6)] for c in range(b3)]

# Firstly, we map s10, s11 to x and s0.
for edg in c1_b1:
    d1[edg[0]][0], d1[edg[1]][0] = -1, 1
    d1[edg[0]][c1_b1.index(edg) + 1], d1[edg[1]][c1_b1.index(edg) + 1] = 1, -1
    
# Next, map [s20, s21, s22, s23] to s1 and s2.
for edg in c1_b2:
    for i in range(4):
        d1[edg[i]][b0 + b1 + c1_b2.index(edg)] = 1
        for gen in gens:
            if abs(unpt_sqs[c1_b2.index(edg)][i]) == gen:
                d1[edg[i]][1 + gens.index(gen)] = -1
                break
                
# Finally, map [s3i] to s2 and s3.
for edg in c1_b3:
    for i in range(6):
        d1[edg[i]][b0 + b1 + b2 + c1_b3.index(edg)] = 1
        for sq in unpt_sqs:
            if unpt_cubes[c1_b3.index(edg)][i] in all_syms(sq):
                d1[edg[i]][1 + b1 + unpt_sqs.index(sq)] = -1          

# -----------------------------------------
# The matrix d2
# -----------------------------------------

# d2 is a c2 x c1 matrix.
# The columns are labelled by edges as above: [s10, s11], [s20, s21, s22, s23], [s3i].
# The rows are labelled by 4-tuples of tiles [s20, s21, s22, s23], and by 12-tuples [s3i], one for each cube.
# This will be the map which sends tiles to their boundary edges.
# Every row contains exactly four non-zero entries.
d2 = np.zeros((c2, c1)).astype(int)

c2_b2 = [[4*s + i for i in range(4)] for s in range(b2)]
last_c2_b2 = c2_b2[-1][-1]
c2_b3 = [[last_c2_b2 + 1 + 12*s + i for i in range(12)] for s in range(b3)]

# Firstly, we map the four small squares formed by subdividing each s2, [s20, s21, s22, s23], to their boundaries.

# Subsquare s21 is adjacent to two edges on the inside of s2, and two edges X,Y on the boundary of s2.
# This function tells us, based on the directions of X,Y, which labels they have.
def edg_exterior(edg):
    sgn = np.sign(edg)
    if sgn == 1: return 0 
    elif sgn == -1: return 1
    else: raise ValueError("Something is wrong -- one of the labels is 0")
    
for sq in c2_b2:
    for i in range(4):
        k = (i - 1) % 4
        d2[sq[i]][last_c1_b1 + 1 + sq[i]], d2[sq[i]][last_c1_b1 + 1 + sq[0] + k] = 1, -1
        for gen in gens:
            X = unpt_sqs[c2_b2.index(sq)][i]
            Y = unpt_sqs[c2_b2.index(sq)][k]
            if gen == abs(X):
                d2[sq[i]][c1_b1[gens.index(gen)][edg_exterior(X)]] = np.sign(X)
            if gen == abs(Y):
                d2[sq[i]][c1_b1[gens.index(gen)][1 - edg_exterior(Y)]] = np.sign(Y)
                
# Finally, we map the twelve small squares formed by subdividing each cube s3 to their boundaries.

# Each square is adjacent to two edges on the inside of s3, and two edges X,Y on the faces of s3.

# Order of faces around the outside of the cube.
cycles = [[1,5,4,2], [2,3,5,0], [0,4,3,1]]
    
# This function tells us the interior labels.
def sqr_interior(sqr):
    q = int(np.floor(sqr/4))
    r = sqr % 4
    # The sgn here tells us whether the matrix entry will be +1 or -1.
    return [{"edge": cycles[q][r], "sgn": +1}, {"edge": cycles[q][r-1], "sgn": -1}]

# This function tells us the exterior labels.
def sqr_exterior_no_symmetry(sqr):
    interior = sqr_interior(sqr)
    r = sqr % 4
    edg_numbers = [[0,3], [1,2], [2,3], [1,0]]
    return [[interior[i], edg_numbers[r][i]] for i in range(2)]

# This function assigns a number corresponding to the orientation of a face wrt the standard orientation.
# This is based on the order of tile_symmetries.
# It outputs the tile number, and then the symmetry number.
def sym_number(face):
    for tile in unpt_sqs:
        syms = all_syms(tile)
        if face in syms:
            return {"tile_number": unpt_sqs.index(tile), "sym": syms.index(face)}  
                
# This function makes adjustments to the order of exterior labels, based on the sym_number of the exterior face.
# Input is a cube, and the interior subsquare of the cube from 0--11 for which we want the exterior labels.
def sqr_exterior(cube, position):
    A = sqr_exterior_no_symmetry(position)
    n = [sym_number(face)["sym"] for face in cube]
    # q asks which cycle from cycles are we looking at: 0,1 or 2?
    q = int(np.floor(position/4))
    r = position % 4
    adj_faces = [cycles[q][r], cycles[q][r - 1]]
    change = [n[f] for f in adj_faces]
    for i in [0,1]:
        # If one of the relevant faces of the cube is from the following set of parallel faces,
        # then flipping the face horizontally changes the edge labels of the interior subsquare by +2.
        if adj_faces[i] in [cycles[q][1], cycles[q][3]] and change[i] >= 4:
            change[i] += 2
        A[i][1] = (A[i][1] + change[i]) % 4
    return A 

for sqr in c2_b3:
    for i in range(12):
        for j in sqr_interior(i):
            d2[sqr[i]][last_c1_b2 + 1 + 6*c2_b3.index(sqr) + j["edge"]] = j["sgn"]
        cube = unpt_cubes[c2_b3.index(sqr)]
        ext_labels = sqr_exterior(cube, i) 
        for j in ext_labels:
            tile_index = sym_number(cube[j[0]["edge"]])["tile_number"]
            d2[sqr[i]][last_c1_b1 + 1 + 4*tile_index + abs(j[1])] = j[0]["sgn"]
            
# -----------------------------------------
# The matrix d3
# -----------------------------------------

# d2 is a c3 x c2 matrix.
# The columns are labelled by squares as above: 
# 4-tuples of tiles [s20, s21, s22, s23], and by 12-tuples [s3i], one for each cube.
# The rows are labelled by 8-tuples [s3i], comprising the eight subcubes of the barycentric subdivision.
# This will be the map which sends cubes to their boundary tiles.
# Every row contains exactly six non-zero entries.
d3 = np.zeros((c3, c2)).astype(int)

c3_b3 = [[8*c + i for i in range(8)] for c in range(b3)]

# Now we map the eight small cubes formed by subdividing each cube s3 to their boundaries.

# Each cube is adjacent to six faces on the inside of s3, and three faces on the outside of s3.

def cub_interior(cub):
    r = cub % 8
    face_numbers = [
            [[0,-1], [4,-1], [8,-1]],
            [[1,-1], [7,-1], [8,+1]],
            [[2,-1], [7,+1], [9,+1]],
            [[3,-1], [4,+1], [9,-1]],
            [[0,+1], [5,-1], [11,-1]],
            [[1,+1], [6,-1], [11,+1]],
            [[2,+1], [6,+1], [10,+1]],
            [[3,+1], [5,+1], [10,-1]]]
    # The sgn here tells us whether the matrix entry will be +1 or -1.
    return [{"face": number[0], "sgn": number[1]} for number in face_numbers[r]]

# This function tells us the exterior labels.
# The first co-ordinate is the face number (0--5), and the second is the subface number (0--3).
def cub_exterior_no_symmetry(cub):
    r = cub % 8
    face_numbers = [
        [[0,0], [1,0], [2,0]], 
        [[0,1], [1,3], [5,1]], 
        [[0,2], [4,2], [5,0]], 
        [[0,3], [4,1], [2,1]], 
        [[3,1], [1,1], [2,3]], 
        [[3,0], [1,2], [5,2]], 
        [[3,3], [4,3], [5,3]], 
        [[3,2], [4,0], [2,2]]]
    return face_numbers[r] 

# Functions which return the symmetries of an unpointed cube C.
def hor0(C):
    return [hor(C[0]), ver(C[1]), hor(C[5]), hor(C[3]), ver(C[4]), hor(C[2])]
def ver0(C):
    return [ver(C[0]), hor(C[4]), hor(C[2]), ver(C[3]), hor(C[1]), hor(C[5])]
def rot0(C):
    return [rot(C[0]), rot(C[4]), C[5], rot(C[3]), rot(C[1]), C[2]]
def inv0(C):
    return [hor(C[3]), hor(C[1]), ver(C[2]), hor(C[0]), hor(C[4]), ver(C[5])]
def horinv(C):
    return [C[3], rot(C[1]), rot(C[5]), C[0], rot(C[4]), rot(C[2])]
def verinv(C):
    return [rot(C[3]), C[4], rot(C[2]), rot(C[0]), C[1], rot(C[5])]
def rotinv(C):
    return [ver(C[3]), ver(C[4]), ver(C[5]), ver(C[0]), ver(C[1]), ver(C[2])]

# Set of all cubes symmetric to a given cube.
def cube_symmetries(C):
    return [C, hor0(C), ver0(C), rot0(C), inv0(C), horinv(C), verinv(C), rotinv(C)]

# This function assigns a number corresponding to the orientation of a cube wrt the standard orientation.
# This is based on the order of cube_symmetries.
# It outputs the cube number, and then the symmetry number.
def cube_sym_number(cube):
    for unpt_cube in unpt_cubes:
        syms = cube_symmetries(unpt_cube)
        if cube in syms:
            return {"cube_number": unpt_cubes.index(unpt_cube), "sym": syms.index(cube)} 

def subface_labels(face):
    n = sym_number(face)["sym"]
    labels = [
        {"tile_number": sym_number(face)["tile_number"], "subsquare": i, "sgn": +1} for i in range(4)]
    if n < 4:
        labels = [labels[(i+n) % 4] for i in range(4)]
    if n >= 4:
        labels = [labels[(n-i+1) % 4] for i in range(4)]
        for label in labels: label["sgn"] = -1
    return labels
        
# This function makes adjustments to the sign of exterior labels, based on the sym_number of the cube.
# Input is a cube, and the interior subcube from 0--7 for which we want the exterior labels.
# Output is a list of three signed subtiles.
def cub_exterior(cube, position):
    X = cub_exterior_no_symmetry(position)
    new_labels = [subface_labels(face) for face in cube]
    return [new_labels[X[i][0]][X[i][1]] for i in range(3)]
    
for cub in c3_b3:
    for i in range(8):
        for j in cub_interior(i):
            d3[cub[i]][last_c2_b2 + 1 + 12*c3_b3.index(cub) + j["face"]] = j["sgn"]
        cube = unpt_cubes[c3_b3.index(cub)]
        for j in cub_exterior(cube, i):
            d3[cub[i]][4*j["tile_number"] + j["subsquare"]] = j["sgn"]
            
# Check differential matrices form an exact sequence.
# d21 = np.matmul(d2, d1)
# d32 = np.matmul(d3, d2)
# np.all(d32 == 0)

# Print code readable by MAGMA.
def flatten(matr):
    return [j for i in matr for j in i]

def print_matrices():    
    txtfile = "neww_bdry_matrices_{}.txt".format(name)
    f = open(txtfile, "a")
    print("unpt_tiles =",unpt_sqs, file=f)
    print("unpt_cubes =",unpt_cubes, file=f)
    print("*******************************************", file=f)
    print(
        "height_d1:={}; width_d1:={}; height_d2:={}; height_d3:={};".format(
            len(d1), len(d1[0]), len(d2), len(d3)
        ), file=f
    )
    print("d1 := Matrix(IntegerRing(),{},{},{});".format(len(d1), len(d1[0]), flatten(d1)), file=f)
    print("d2 := Matrix(IntegerRing(),{},{},{});".format(len(d2), len(d2[0]), flatten(d2)), file=f)
    print("d3 := Matrix(IntegerRing(),{},{},{});".format(len(d3), len(d3[0]), flatten(d3)), file=f)
    f.close()
    print("done")
    
print_matrices()
